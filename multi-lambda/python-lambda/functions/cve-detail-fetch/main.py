import json
import requests
import time

def get_severity(vulnerability):
    metrics = vulnerability.get("metrics", {})
    
    for metric_type in ["cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
        if metric_type in metrics and metrics[metric_type]:
            cvss_data = metrics[metric_type][0]
            if "cvssData" in cvss_data:
                return {
                    "type": metric_type,
                    "baseScore": cvss_data["cvssData"].get("baseScore"),
                    "baseSeverity": cvss_data["cvssData"].get("baseSeverity", "N/A"),
                    "vector": cvss_data["cvssData"].get("vectorString", "N/A")
                }
    
    return None

def fetch_cve_details(cve_ids):
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    results = {}
    
    chunk_size = 5
    for i in range(0, len(cve_ids), chunk_size):
        chunk = cve_ids[i:i+chunk_size]
        
        for cve_id in chunk:
            if not cve_id.startswith("CVE-"):
                cve_id = f"CVE-{cve_id}" if "-" in cve_id else f"CVE-{cve_id}"
            
            params = {"cveId": cve_id}
            
            try:
                response = requests.get(base_url, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get("totalResults", 0) > 0 and "vulnerabilities" in data:
                        vulnerability = data["vulnerabilities"][0]["cve"]
                        
                        results[cve_id] = {
                            "description": vulnerability.get("descriptions", [{}])[0].get("value", "No description available"),
                            "published": vulnerability.get("published"),
                            "lastModified": vulnerability.get("lastModified"),
                            "severity": get_severity(vulnerability)
                        }
                    else:
                        results[cve_id] = None
                else:
                    print(f"Error fetching {cve_id}: Status code {response.status_code}")
                    results[cve_id] = None
                    
            except Exception as e:
                print(f"Exception when fetching {cve_id}: {e}")
                results[cve_id] = None
            
            # Wait to avoid rate limiting - consider adjusting for Lambda execution time constraints
            time.sleep(0.6)
    
    return results

def lambda_handler(event, context):
    # Get the list of CVE IDs from the event
    cve_ids = event.get('cve_ids', [])
    
    # If no CVE IDs provided, return empty response
    if not cve_ids:
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'No CVE IDs provided',
                'results': {}
            })
        }
    
    # Fetch CVE details
    cve_details = fetch_cve_details(cve_ids)
    
    # Return response
    return {
        'statusCode': 200,
        'body': json.dumps({
            'message': f'Retrieved details for {len(cve_details)} CVE IDs',
            'results': cve_details
        }, default=str)  # default=str handles any non-serializable objects
    }

# Event will look like this:
# {
#   "cve_ids": ["CVE-2021-44228", "CVE-2014-0160"]
# }